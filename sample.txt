#include<stdio.h>
#include<string.h>
void ceasercipher(char *ciphertext,char *plaintext,int key)
{
    for(int i=0;plaintext[i]!='\0';i++)
    {
        if(plaintext[i]>='A' && plaintext[i]<='Z')
        {
        ciphertext[i]=(plaintext[i] -'A' + key) % 26 +'A';
        }
        else if(plaintext[i]>='a' && plaintext[i]<='z')
        {
           ciphertext[i]=(plaintext[i] -'a' + key) % 26 +'a';  
        }
    }
}
void main()
{
    char plaintext[100],ciphertext[100];
    int key;
    printf("Enter the plaintext\n");
    fgets(plaintext,sizeof(plaintext),stdin);
    printf("Enter the key size\n");
    scanf("%d",&key);
    ceasercipher(ciphertext,plaintext,key);
    printf("After encryption\n");
    printf("%s",ciphertext);
}

#hmaac 
import hmac
import hashlib
def compute_digest(filename, key):
    with open(filename, 'rb') as file:
        file_data = file.read()
    return hmac.new(key.encode(), file_data, hashlib.sha256).hexdigest()
filename = input("Enter filename: ")
key = input("Enter secret key: ")
digest = compute_digest(filename, key)
print("Generated HMAC:", digest)
verify = input("Enter HMAC to validate: ")
if digest==verify:
    print("HMAC is valid. Message integrity verified.")
else:
    print(" HMAC is invalid. Message might be tampered.")

#HILL CIPHER
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int charToInt(char c) {
    return toupper(c) - 'A';
}

char intToChar(int n) {
    return (n % 26) + 'A';
}

int main() {
    int key[3][3] = {
        {3, 3, 2},
        {2, 5, 1},
        {1, 2, 4}
    };

    char plaintext[4];  // 3-letter input + null terminator
    char ciphertext[4]; // 3-letter output + null terminator
    int ptVec[3];
    int ctVec[3];

    printf("Enter 3-letter plaintext (A-Z): ");
    scanf("%3s", plaintext);

    ptVec[0] = charToInt(plaintext[0]);
    ptVec[1] = charToInt(plaintext[1]);
    ptVec[2] = charToInt(plaintext[2]);
    for(int i=0;i<3;i++)
    {
    printf("%3d",ptVec[i]);
    }
    printf("\n");
    ctVec[0] = (key[0][0] * ptVec[0] + key[0][1] * ptVec[1] + key[0][2] * ptVec[2]) % 26;
    ctVec[1] = (key[1][0] * ptVec[0] + key[1][1] * ptVec[1] + key[1][2] * ptVec[2]) % 26;
    ctVec[2] = (key[2][0] * ptVec[0] + key[2][1] * ptVec[1] + key[2][2] * ptVec[2]) % 26;

    ciphertext[0] = intToChar(ctVec[0]);
    ciphertext[1] = intToChar(ctVec[1]);
    ciphertext[2] = intToChar(ctVec[2]);
    ciphertext[3] = '\0';

    printf("Encrypted text: %s\n", ciphertext);
    printf("Decrypted text: %s\n",plaintext);
    return 0;
}


#ceaser cipher

#include <stdio.h>
#include <string.h>

// Function to encrypt the text using Caesar Cipher
void encrypt(char *text, int shift) {
    for (int i = 0; text[i] != '\0'; i++) {
        // Encrypt uppercase letters
        if (text[i] >= 'A' && text[i] <= 'Z') {
            text[i] = ((text[i] - 'A' + shift) % 26) + 'A';
        }
        // Encrypt lowercase letters
        else if (text[i] >= 'a' && text[i] <= 'z') {
            text[i] = ((text[i] - 'a' + shift) % 26) + 'a';
        }
    }
}

// Function to decrypt the text using Caesar Cipher
void decrypt(char *text, int shift) {
    for (int i = 0; text[i] != '\0'; i++) {
        // Decrypt uppercase letters
        if (text[i] >= 'A' && text[i] <= 'Z') {
            text[i] = ((text[i] - 'A' - shift + 26) % 26) + 'A';
        }
        // Decrypt lowercase letters
        else if (text[i] >= 'a' && text[i] <= 'z') {
            text[i] = ((text[i] - 'a' - shift + 26) % 26) + 'a';
        }
    }
}

int main() {
    char text[100];
    int shift;

    // Input the text and the shift value
    printf("Enter a string: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0';  // Remove the newline character from input

    printf("Enter shift value: ");
    scanf("%d", &shift);

    // Encrypt the text
    encrypt(text, shift);
    printf("Encrypted text: %s\n", text);

    // Decrypt the text
    decrypt(text, shift);
    printf("Decrypted text: %s\n", text);

    return 0;
}




#playfair

#include <stdio.h>
#include <string.h>
#include <ctype.h>

char matrix[5][5];

// Function to create 5x5 matrix using key
void createMatrix(char key[]) {
    int i, j, k = 0;
    int used[26] = {0};
    char fullKey[25];

    // Prepare key: remove duplicates, treat I & J the same
    for (i = 0; key[i] != '\0'; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (isalpha(ch) && !used[ch - 'A']) {
            fullKey[k++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    // Add remaining letters
    for (i = 0; i < 26; i++) {
        if (i + 'A' == 'J') continue;
        if (!used[i]) {
            fullKey[k++] = i + 'A';
            used[i] = 1;
        }
    }

    // Fill matrix
    k = 0;
    for (i = 0; i < 5; i++)
        for (j = 0; j < 5; j++)
            matrix[i][j] = fullKey[k++];
}

// Find position of a letter in matrix
void findPos(char ch, int *row, int *col) {
    int i, j;
    for (i = 0; i < 5; i++)
        for (j = 0; j < 5; j++)
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}

// Encrypt plaintext
void encrypt(char text[]) {
    int i, row1, col1, row2, col2;
    printf("Encrypted Text: ");
    for (i = 0; text[i] != '\0'; i += 2) {
        char a = toupper(text[i]);
        char b = toupper(text[i + 1]);

        if (a == b) b = 'X'; // If letters are same, insert 'X'
        if (b == '\0') b = 'X'; // If odd length, pad with 'X'

        if (a == 'J') a = 'I';
        if (b == 'J') b = 'I';

        findPos(a, &row1, &col1);
        findPos(b, &row2, &col2);

        if (row1 == row2)
            printf("%c%c", matrix[row1][(col1 + 1) % 5], matrix[row2][(col2 + 1) % 5]);
        else if (col1 == col2)
            printf("%c%c", matrix[(row1 + 1) % 5][col1], matrix[(row2 + 1) % 5][col2]);
        else
            printf("%c%c", matrix[row1][col2], matrix[row2][col1]);
    }
    printf("\n");
}

int main() {
    char key[100], text[100];

    // Input the keyword (use fgets for safer input)
    printf("Enter keyword: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0'; // Remove newline character from the input

    // Input the plaintext (use fgets for safer input)
    printf("Enter plaintext (no spaces): ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0'; // Remove newline character from the input

    // Pad the text if necessary (to ensure it's even length)
    int len = strlen(text);
    if (len % 2 != 0) {
        text[len] = 'X'; // Pad with 'X' if odd length
        text[len + 1] = '\0'; // Null-terminate
    }

    createMatrix(key);
    encrypt(text);

    return 0;
}



#vignere cypher:

#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to encrypt using Vigenère Cipher
void vigenereEncrypt(char plaintext[], char key[]) {
    int i, j = 0;
    char cipher[100];

    int len = strlen(plaintext);
    int keyLen = strlen(key);

    printf("Encrypted Text: ");

    for (i = 0; i < len; i++) {
        if (isalpha(plaintext[i])) {
            char p = toupper(plaintext[i]) - 'A';
            char k = toupper(key[j % keyLen]) - 'A';
            char c = (p + k) % 26 + 'A';
            printf("%c", c);
            j++;
        } else {
            // Non-alphabet characters remain unchanged
            printf("%c", plaintext[i]);
        }
    }
    printf("\n");
}

int main() {
    char plaintext[100], key[100];

    printf("Enter plaintext (letters and spaces allowed): ");
    fgets(plaintext, sizeof(plaintext), stdin); // Allow spaces in input
    plaintext[strcspn(plaintext, "\n")] = '\0';  // Remove the newline character

    printf("Enter key: ");
    scanf("%s", key);

    vigenereEncrypt(plaintext, key);

    return 0;
}
#hill cipher
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 2

int keyMatrix[SIZE][SIZE] = {
    {3, 3},
    {2, 5}
};

void encrypt(char message[], char encrypted[]) {
    int i, j, k;
    int msgVector[SIZE], result[SIZE];

    for (i = 0; i < strlen(message); i += SIZE) {
        for (j = 0; j < SIZE; j++) {
            msgVector[j] = toupper(message[i + j]) - 'A';
        }

        for (j = 0; j < SIZE; j++) {
            result[j] = 0;
            for (k = 0; k < SIZE; k++) {
                result[j] += keyMatrix[j][k] * msgVector[k];
            }
            result[j] %= 26;
        }

        for (j = 0; j < SIZE; j++) {
            encrypted[i + j] = result[j] + 'A';
        }
    }
    encrypted[i] = '\0';
}

int main() {
    char message[100], encrypted[100];

    printf("Enter the message (even length, A-Z only): ");
    scanf("%s", message);

    if (strlen(message) % 2 != 0) {
        printf("Message length must be even.\n");
        return 1;
    }

    encrypt(message, encrypted);
    printf("Encrypted message: %s\n", encrypted);

    return 0;
}

#railfence


#include <stdio.h>
#include <string.h>
void RailFence(char *text, int rails) {
    int len = strlen(text);
    char rail[rails][len];
    for (int i = 0; i < rails; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = 'x';
    int dir_down = 0;
    int row = 0, col = 0;
    for (int i = 0; i < len; i++) {
        rail[row][col++] = text[i];
        if (row == 0)
            dir_down = 1;
        else if (row == rails - 1)
            dir_down = 0;
        if (dir_down==0)
            row--;
        else if(dir_down==1)
            row++;
    }
    printf("Encrypted Text: ");
    for (int i = 0; i < rails; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] != 'x')
                printf("%c", rail[i][j]);
    printf("\n");
}

int main() {
    char text[100];
    int rails;
    printf("Enter the plaintext (no spaces): ");
    scanf("%s", text);
    printf("Enter number of rails: ");
    scanf("%d", &rails);
    RailFence(text, rails);
    return 0;
}



 DEFFIE HELLMAN
#include <stdio.h>
#include <math.h>

int main() {
    long int p, g;
    long int a, b;
    long int A, B;
    long int keyA, keyB;

    printf("Enter a prime number (p): ");
    scanf("%ld", &p);

    printf("Enter a primitive root modulo p (g): ");
    scanf("%ld", &g);

    printf("Host A, enter private key (a): ");
    scanf("%ld", &a);

    printf("Host B, enter private key (b): ");
    scanf("%ld", &b);

    A = ((long int)pow(g, a)) % p;
    B = ((long int)pow(g, b)) % p;

    printf("\nHost A sends public key: %ld", A);
    printf("\nHost B sends public key: %ld", B);

    keyA = ((long int)pow(B, a)) % p;
    keyB = ((long int)pow(A, b)) % p;

    printf("\n\nHost A's shared secret key: %ld", keyA);
    printf("\nHost B's shared secret key: %ld", keyB);

    if (keyA == keyB) {
        printf("\n Shared key successfully generated!\n");
    } else {
        printf("\n Shared key mismatch!\n");
    }

    return 0;
}


PASSWORD GENERATOR

import secrets
import string

def generate_password(length):
    if length < 8:
        print("Password should be at least 8 characters long for strength.")
        return None

    # Character sets
    letters = string.ascii_letters
    digits = string.digits
    symbols = string.punctuation

    # Combine all character sets
    all_chars = letters + digits + symbols

    # Generate a secure random password
    password = ''.join(secrets.choice(all_chars) for _ in range(length))
    return password

# Get desired length from user
length = int(input("Enter the length of the password (minimum 8): "))
password = generate_password(length)

if password:
    print("Generated Strong Password:", password)



VIGNERE
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to repeat key to match the message length
void generateKey(char *msg, char *key, char *newKey) {
    int msgLen = strlen(msg);
    int keyLen = strlen(key);
    int p = 0;

    for (int i = 0; i < msgLen; i++) {
        newKey[i] = key[p];
        p++;
        if (p == keyLen) {
            p = 0;
        }
    }
    newKey[msgLen] = '\0'; 
}
void encrypt(char *msg, char *key, char *cipher) {
    for (int i = 0; msg[i]; i++) {
        if (isalpha(msg[i])) {
            cipher[i] = ((msg[i] - 'A' + key[i] - 'A') % 26) + 'A';
        } else {
            cipher[i] = msg[i]; 
        }
    }
    cipher[strlen(msg)] = '\0'; 
}

int main() {
    char message[100], key[100], newKey[100], cipher[100];

    printf("PLEASE ENTER ALL INPUTS IN UPPERCASE LETTERS ONLY (A-Z)\n");

    printf("Enter message: ");
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = 0;
    printf("Enter key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = 0; 
    generateKey(message, key, newKey);
    encrypt(message, newKey, cipher);

    printf("Generated Key: %s\n", newKey);
    printf("Encrypted Message: %s\n", cipher);

    return 0;
}
VIEGNERE



CEASER CIPHER




PLAYFAIR

#include <stdio.h>
#include <string.h>
#include <ctype.h>

char matrix[5][5];

void createMatrix(char *key) {
    int used[26] = {0}, i, j, k = 0;
    char fullKey[25];

    for (i = 0; key[i]; i++) {
        char ch = toupper(key[i] == 'J' ? 'I' : key[i]);
        if (isalpha(ch) && !used[ch - 'A']) {
            fullKey[k++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    for (i = 0; i < 26; i++) {
        if (i + 'A' != 'J' && !used[i])
            fullKey[k++] = i + 'A';
    }

    k = 0;
    for (i = 0; i < 5; i++)
        for (j = 0; j < 5; j++)
            matrix[i][j] = fullKey[k++];
}

void find(char c, int *r, int *cpos) {
    if (c == 'J') c = 'I';
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            if (matrix[i][j] == c) { *r = i; *cpos = j; return; }
}

void encrypt(char *msg) {
    char temp[100]; int i, len = 0;
    for (i = 0; msg[i]; i++) {
        char ch = toupper(msg[i] == 'J' ? 'I' : msg[i]);
        if (isalpha(ch)) temp[len++] = ch;
    }

    for (i = 0; i < len; i += 2) {
        if (i == len - 1 || temp[i] == temp[i + 1]) {
            for (int j = len; j > i + 1; j--) temp[j] = temp[j - 1];
            temp[i + 1] = 'X'; len++;
        }
    }

    printf("Encrypted: ");
    for (i = 0; i < len; i += 2) {
        int r1, c1, r2, c2;
        find(temp[i], &r1, &c1); find(temp[i + 1], &r2, &c2);

        if (r1 == r2)
            printf("%c%c", matrix[r1][(c1 + 1) % 5], matrix[r2][(c2 + 1) % 5]);
        else if (c1 == c2)
            printf("%c%c", matrix[(r1 + 1) % 5][c1], matrix[(r2 + 1) % 5][c2]);
        else
            printf("%c%c", matrix[r1][c2], matrix[r2][c1]);
    }
    printf("\n");
}

int main() {
    char key[50], msg[100];

    printf("Key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = 0;  // remove trailing newline

    printf("Message: ");
    fgets(msg, sizeof(msg), stdin);
    msg[strcspn(msg, "\n")] = 0;  // remove trailing newline

    createMatrix(key);
    encrypt(msg);
    return 0;
}
playfair



